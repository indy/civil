DROP TABLE IF EXISTS edges;
DROP TABLE IF EXISTS notes;
DROP TABLE IF EXISTS deck;
DROP TABLE IF EXISTS timespans;
DROP TABLE IF EXISTS dates;
DROP TABLE IF EXISTS locations;
DROP TABLE IF EXISTS users;
DROP TYPE IF EXISTS node_kind;

CREATE TYPE node_kind AS ENUM ('historic_person', 'historic_point', 'subject', 'article', 'note');
-- ALTER TYPE node_kind ADD VALUE 'note'; -- appends value to enum

CREATE TABLE IF NOT EXISTS users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    email TEXT UNIQUE NOT NULL,
    username TEXT NOT NULL,

    password TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS dates (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    textual TEXT,
    exact_date DATE,
    lower_date DATE,
    upper_date DATE,
    fuzz REAL NOT NULL DEFAULT 1.0
);

CREATE TABLE IF NOT EXISTS timespans (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    textual TEXT, -- textual description of the timespan e.g. "around 50 years old"
    date_start_id BIGINT REFERENCES dates,
    date_end_id BIGINT REFERENCES dates
);

CREATE TABLE IF NOT EXISTS locations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    textual TEXT,
    longitude REAL,
    latitude REAL,
    fuzz REAL NOT NULL DEFAULT 0.0
);

CREATE TABLE IF NOT EXISTS notes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    -- not _really_ required but could be used to check
    -- that the user is authorized to view this note
    --
    -- this will become really important once tags are
    -- in and we can have orphan notes
    --
    user_id BIGINT NOT NULL REFERENCES users,

    note_type INT NOT NULL,
    source TEXT,
    content TEXT NOT NULL,
    title TEXT,
    separator BOOL NOT NULL DEFAULT false
);

CREATE TABLE IF NOT EXISTS decks (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    user_id BIGINT NOT NULL REFERENCES users,

    kind node_kind NOT NULL,

    name TEXT NOT NULL,         -- was title in articles and historic_points
    source TEXT,                -- from articles

    date_id BIGINT REFERENCES dates, -- historic_points
    location_id BIGINT REFERENCES locations, --historic_points

    timespan_id BIGINT REFERENCES timespans, -- historic_people
    location2_id BIGINT REFERENCES locations -- historic_people (death_location)
);

CREATE TABLE IF NOT EXISTS edges (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    from_kind node_kind NOT NULL,
    to_kind node_kind NOT NULL,

    from_deck_id BIGINT REFERENCES decks,
    to_deck_id BIGINT REFERENCES decks,
    from_note_id BIGINT REFERENCES notes,
    to_note_id BIGINT REFERENCES notes
);

CREATE TABLE IF NOT EXISTS tags (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    name TEXT NOT NULL,

    description TEXT
);

CREATE TABLE IF NOT EXISTS tags_notes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    tag_id BIGINT NOT NULL REFERENCES tags,
    note_id BIGINT NOT NULL REFERENCES notes
);

CREATE TABLE IF NOT EXISTS tags_decks (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    tag_id BIGINT NOT NULL REFERENCES tags,
    deck_id BIGINT NOT NULL REFERENCES decks
);
