DROP TABLE IF EXISTS edges2;
DROP TABLE IF EXISTS edges;
DROP TABLE IF EXISTS notes;
DROP TABLE IF EXISTS deck;
DROP TABLE IF EXISTS subjects;
DROP TABLE IF EXISTS articles;
DROP TABLE IF EXISTS historic_points;
DROP TABLE IF EXISTS historic_people;
DROP TABLE IF EXISTS timespans;
DROP TABLE IF EXISTS dates;
DROP TABLE IF EXISTS locations;
DROP TABLE IF EXISTS users;
DROP TYPE IF EXISTS deck_type;

CREATE TYPE deck_type AS ENUM ('historic_person', 'historic_point', 'subject', 'article');
-- ALTER TYPE deck_type ADD VALUE 'book'; -- appends to list

CREATE TABLE IF NOT EXISTS users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    email TEXT UNIQUE NOT NULL,
    username TEXT NOT NULL,

    password TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS dates (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    textual TEXT,
    exact_date DATE,
    lower_date DATE,
    upper_date DATE,
    fuzz REAL NOT NULL DEFAULT 1.0
);

CREATE TABLE IF NOT EXISTS timespans (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    textual TEXT, -- textual description of the timespan e.g. "around 50 years old"
    date_start_id BIGINT REFERENCES dates,
    date_end_id BIGINT REFERENCES dates
);

CREATE TABLE IF NOT EXISTS locations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    textual TEXT,
    longitude REAL,
    latitude REAL,
    fuzz REAL NOT NULL DEFAULT 0.0
);

CREATE TABLE IF NOT EXISTS notes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    -- not _really_ required but could be used to check
    -- that the user is authorized to view this note
    --
    user_id BIGINT NOT NULL REFERENCES users,

    note_type INT NOT NULL,
    source TEXT,
    content TEXT NOT NULL,
    annotation TEXT,
    separator BOOL NOT NULL DEFAULT false
);

CREATE TABLE IF NOT EXISTS subjects (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    user_id BIGINT NOT NULL REFERENCES users,

    name TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS articles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    user_id BIGINT NOT NULL REFERENCES users,

    title TEXT NOT NULL,
    source TEXT
);

CREATE TABLE IF NOT EXISTS historic_points (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    user_id BIGINT NOT NULL REFERENCES users,

    title TEXT NOT NULL,
    date_id BIGINT REFERENCES dates,
    location_id BIGINT REFERENCES locations
);

CREATE TABLE IF NOT EXISTS historic_people (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    user_id BIGINT NOT NULL REFERENCES users,

    name TEXT NOT NULL,
    birth_date_id BIGINT REFERENCES dates NOT NULL,
    birth_location_id BIGINT REFERENCES locations NOT NULL,
    death_date_id BIGINT REFERENCES dates,
    death_location_id BIGINT REFERENCES locations,
    age TEXT                    -- sqlite: was NOT NULL
);

CREATE TABLE IF NOT EXISTS deck (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    user_id BIGINT NOT NULL REFERENCES users,

    type deck_type NOT NULL,

    name TEXT NOT NULL,         -- was title in articles and historic_points
    source TEXT,                -- from articles

    date_id BIGINT REFERENCES dates, -- historic_points
    location_id BIGINT REFERENCES locations, --historic_points

    timespan_id BIGINT REFERENCES timespans, -- historic_people
    location2_id BIGINT REFERENCES locations -- historic_people (death_location)
);

CREATE TABLE IF NOT EXISTS edges (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    edge_type INT NOT NULL,
    annotation TEXT,

    historic_person_id BIGINT REFERENCES historic_people, -- sqlite: person_id
    note_id BIGINT REFERENCES notes,
    subject_id BIGINT REFERENCES subjects,
    article_id BIGINT REFERENCES articles,
    historic_point_id BIGINT REFERENCES historic_points -- sqlite: point_id
);

CREATE TABLE IF NOT EXISTS edges2 (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    annotation TEXT,

    from_type deck_type NOT NULL,
    to_type deck_type NOT NULL,

    from_deck_id BIGINT REFERENCES deck,
    to_deck_id BIGINT REFERENCES deck,
    from_note_id BIGINT REFERENCES notes,
    to_note_id BIGINT REFERENCES notes
);
