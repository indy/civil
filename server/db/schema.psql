DROP TABLE IF EXISTS edges;
DROP TABLE IF EXISTS notes;
DROP TABLE IF EXISTS subjects;
DROP TABLE IF EXISTS articles;
DROP TABLE IF EXISTS historic_points;
DROP TABLE IF EXISTS historic_people;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS dates;
DROP TABLE IF EXISTS locations;

CREATE TABLE IF NOT EXISTS users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    email TEXT UNIQUE NOT NULL,
    username TEXT NOT NULL,

    password TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS dates (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    textual TEXT,
    exact_date DATE,
    lower_date DATE,
    upper_date DATE,
    fuzz INTERVAL NOT NULL      -- sqlite: real
);

CREATE TABLE IF NOT EXISTS locations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    textual TEXT,
    longitude REAL,
    latitude REAL,
    fuzz REAL NOT NULL
);

CREATE TABLE IF NOT EXISTS notes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    -- not _really_ required but could be used to check
    -- that the user is authorized to view this note
    --
    user_id BIGINT NOT NULL REFERENCES users,

    note_type INT NOT NULL,
    source TEXT,
    content TEXT NOT NULL,
    annotation TEXT,
    separator BOOL NOT NULL DEFAULT false -- sqlite: integer default 0
);

CREATE TABLE IF NOT EXISTS subjects (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    user_id BIGINT NOT NULL REFERENCES users,

    name TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS articles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    user_id BIGINT NOT NULL REFERENCES users,

    title TEXT NOT NULL,
    source TEXT
);

CREATE TABLE IF NOT EXISTS historic_points ( -- sqlite: points
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    user_id BIGINT NOT NULL REFERENCES users,

    title TEXT NOT NULL,
    date_id BIGINT REFERENCES dates,
    location_id BIGINT REFERENCES locations
);

CREATE TABLE IF NOT EXISTS historic_people ( -- sqlite: people
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    user_id BIGINT NOT NULL REFERENCES users,

    name TEXT NOT NULL,
    birth_date_id BIGINT REFERENCES dates NOT NULL,
    birth_location_id BIGINT REFERENCES locations NOT NULL,
    death_date_id BIGINT REFERENCES dates,
    death_location_id BIGINT REFERENCES locations,
    age TEXT                    -- sqlite: was NOT NULL
);

CREATE TABLE IF NOT EXISTS edges (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    edge_type INT NOT NULL,
    annotation TEXT,

    historic_person_id BIGINT REFERENCES historic_people, -- sqlite: person_id
    note_id BIGINT REFERENCES notes,
    subject_id BIGINT REFERENCES subjects,
    article_id BIGINT REFERENCES articles,
    historic_point_id BIGINT REFERENCES historic_points -- sqlite: point_id
);
