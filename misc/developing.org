

* building the files in www/lib/preact

** preact + hooks
$ git clone https://github.com/preactjs/preact.git
$ cd preact
$ npm install

built core preact file with:
$ npm run build

copy over the built libraries:
$ cp dist/preact.mjs ~/code/civil/www/lib/preact/.
$ cp hooks/dist/hooks.mjs ~/code/civil/www/lib/preact/.

also copy over the map files
$ cp dist/preact.module.js.map ~/code/civil/www/lib/preact/.
$ cp hooks/dist/hooks.module.js.map ~/code/civil/www/lib/preact/.

changed the import in the hooks.mjs file from:
import{options as n,Fragment as t}from"preact";
to
import{options as n,Fragment as t}from"/lib/preact/preact.mjs";


** htm
$ git clone https://github.com/developit/htm.git
$ cd htm
$ npm install
$ npm run build

$ cp dist/htm.mjs ~/code/civil/www/lib/preact/.

make sure that mod.js properly imports this file, look into htm/preact/index.mjs for how to do this

** preact-router

NOTE
the below doesn't work because the initial 'route' from / to /ideas is broken
I've gone back to an older build of preact-router
the commit at 03f9fb9 had the 'new but broken' router from below, maybe one day try and fix it?

$ git clone https://github.com/preactjs/preact-router.git

$ cd preact-router
$ cp src/index.js ~/code/civil/www/lib/preact/preact-router.js
$ cp src/util.js ~/code/civil/www/lib/preact/preact-router-util.js

then updated the import lines in preact-router.js to match my locations:

#+BEGIN_SRC javascript
import {
    h,
    cloneElement,
    Component,
    toChildArray,
    createContext
} from '/lib/preact/preact.mjs';
import { useContext, useState, useEffect } from '/lib/preact/hooks.mjs';
import { exec, prepareVNodeForRanking, assign, pathRankSort } from '/lib/preact/preact-router-util.js';
#+END_SRC

then a line near the bottom of preact-router was changed from:
#+BEGIN_SRC javascript
return (
    <RouterContext.Provider value={ctx}>{current}</RouterContext.Provider>
);
#+END_SRC

to:
#+BEGIN_SRC javascript
return h(RouterContext.Provider, { value: ctx }, current);
#+END_SRC

* note::next_note_id linked list

each deck can have multiple linked lists of notes

- point_id (each point_id should have it's own list)
- note kind: 'note'
- note kind: 'note_review'
- note kind: 'note_summary'
- note kind: 'note_deckmeta' (should only ever be 1 per-deck)

deck_id: 769 has a lot of notes attached to points


adding a new note to a deck, requires sending the previous note_id
